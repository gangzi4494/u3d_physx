// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace killer {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector4_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxSphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxSphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxCapsule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxCapsule_reflection_ = NULL;
const ::google::protobuf::Descriptor* U3DPhysxMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U3DPhysxMesh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColliderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Scene_2eproto() {
  protobuf_AddDesc_Scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Scene.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  Vector4_descriptor_ = file->message_type(1);
  static const int Vector4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, w_),
  };
  Vector4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector4_descriptor_,
      Vector4::default_instance_,
      Vector4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector4));
  U3DPhysxScene_descriptor_ = file->message_type(2);
  static const int U3DPhysxScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, scene_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, box_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, sphere_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, capsule_collider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, mesh_collider_),
  };
  U3DPhysxScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U3DPhysxScene_descriptor_,
      U3DPhysxScene::default_instance_,
      U3DPhysxScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U3DPhysxScene));
  U3DPhysxSphere_descriptor_ = file->message_type(3);
  static const int U3DPhysxSphere_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, rotation_),
  };
  U3DPhysxSphere_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U3DPhysxSphere_descriptor_,
      U3DPhysxSphere::default_instance_,
      U3DPhysxSphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxSphere, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U3DPhysxSphere));
  U3DPhysxBox_descriptor_ = file->message_type(4);
  static const int U3DPhysxBox_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, x_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, y_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, z_extents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, rotation_),
  };
  U3DPhysxBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U3DPhysxBox_descriptor_,
      U3DPhysxBox::default_instance_,
      U3DPhysxBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U3DPhysxBox));
  U3DPhysxCapsule_descriptor_ = file->message_type(5);
  static const int U3DPhysxCapsule_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, raduis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, rotation_),
  };
  U3DPhysxCapsule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U3DPhysxCapsule_descriptor_,
      U3DPhysxCapsule::default_instance_,
      U3DPhysxCapsule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxCapsule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U3DPhysxCapsule));
  U3DPhysxMesh_descriptor_ = file->message_type(6);
  static const int U3DPhysxMesh_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertex_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, rotation_),
  };
  U3DPhysxMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U3DPhysxMesh_descriptor_,
      U3DPhysxMesh::default_instance_,
      U3DPhysxMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U3DPhysxMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U3DPhysxMesh));
  ColliderType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector4_descriptor_, &Vector4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U3DPhysxScene_descriptor_, &U3DPhysxScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U3DPhysxSphere_descriptor_, &U3DPhysxSphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U3DPhysxBox_descriptor_, &U3DPhysxBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U3DPhysxCapsule_descriptor_, &U3DPhysxCapsule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U3DPhysxMesh_descriptor_, &U3DPhysxMesh::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Scene_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Vector4::default_instance_;
  delete Vector4_reflection_;
  delete U3DPhysxScene::default_instance_;
  delete U3DPhysxScene_reflection_;
  delete U3DPhysxSphere::default_instance_;
  delete U3DPhysxSphere_reflection_;
  delete U3DPhysxBox::default_instance_;
  delete U3DPhysxBox_reflection_;
  delete U3DPhysxCapsule::default_instance_;
  delete U3DPhysxCapsule_reflection_;
  delete U3DPhysxMesh::default_instance_;
  delete U3DPhysxMesh_reflection_;
}

void protobuf_AddDesc_Scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Scene.proto\022\014killer.proto\"3\n\007Vector3\022\014"
    "\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010"
    "\"A\n\007Vector4\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022"
    "\014\n\001z\030\003 \001(\001:\0010\022\014\n\001w\030\004 \001(\001:\0010\"\203\002\n\rU3DPhysx"
    "Scene\022\n\n\002id\030\001 \001(\005\022\022\n\nscene_name\030\002 \001(\t\022/\n"
    "\014box_collider\030\003 \003(\0132\031.killer.proto.U3DPh"
    "ysxBox\0225\n\017sphere_collider\030\004 \003(\0132\034.killer"
    ".proto.U3DPhysxSphere\0227\n\020capsule_collide"
    "r\030\005 \003(\0132\035.killer.proto.U3DPhysxCapsule\0221"
    "\n\rmesh_collider\030\006 \003(\0132\032.killer.proto.U3D"
    "PhysxMesh\"\243\001\n\016U3DPhysxSphere\022\n\n\002id\030\001 \001(\005"
    "\022(\n\004type\030\002 \001(\0162\032.killer.proto.ColliderTy"
    "pe\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector3\022\016"
    "\n\006radius\030\004 \001(\001\022\'\n\010rotation\030\005 \001(\0132\025.kille"
    "r.proto.Vector4\"\311\001\n\013U3DPhysxBox\022\n\n\002id\030\001 "
    "\001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto.Collide"
    "rType\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector"
    "3\022\021\n\tx_extents\030\004 \001(\001\022\021\n\ty_extents\030\005 \001(\001\022"
    "\021\n\tz_extents\030\006 \001(\001\022\'\n\010rotation\030\007 \001(\0132\025.k"
    "iller.proto.Vector4\"\264\001\n\017U3DPhysxCapsule\022"
    "\n\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto"
    ".ColliderType\022\"\n\003pos\030\003 \001(\0132\025.killer.prot"
    "o.Vector3\022\016\n\006raduis\030\004 \001(\001\022\016\n\006height\030\005 \001("
    "\001\022\'\n\010rotation\030\006 \001(\0132\025.killer.proto.Vecto"
    "r4\"\254\001\n\014U3DPhysxMesh\022\n\n\002id\030\001 \001(\005\022(\n\004type\030"
    "\002 \001(\0162\032.killer.proto.ColliderType\022\024\n\014ver"
    "tex_count\030\003 \001(\005\022\'\n\010vertices\030\004 \003(\0132\025.kill"
    "er.proto.Vector3\022\'\n\010rotation\030\005 \001(\0132\025.kil"
    "ler.proto.Vector4*:\n\014ColliderType\022\007\n\003BOX"
    "\020\001\022\n\n\006SPHERE\020\002\022\013\n\007CAPSULE\020\003\022\010\n\004MESH\020\004", 1197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Scene.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  Vector4::default_instance_ = new Vector4();
  U3DPhysxScene::default_instance_ = new U3DPhysxScene();
  U3DPhysxSphere::default_instance_ = new U3DPhysxSphere();
  U3DPhysxBox::default_instance_ = new U3DPhysxBox();
  U3DPhysxCapsule::default_instance_ = new U3DPhysxCapsule();
  U3DPhysxMesh::default_instance_ = new U3DPhysxMesh();
  Vector3::default_instance_->InitAsDefaultInstance();
  Vector4::default_instance_->InitAsDefaultInstance();
  U3DPhysxScene::default_instance_->InitAsDefaultInstance();
  U3DPhysxSphere::default_instance_->InitAsDefaultInstance();
  U3DPhysxBox::default_instance_->InitAsDefaultInstance();
  U3DPhysxCapsule::default_instance_->InitAsDefaultInstance();
  U3DPhysxMesh::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Scene_2eproto {
  StaticDescriptorInitializer_Scene_2eproto() {
    protobuf_AddDesc_Scene_2eproto();
  }
} static_descriptor_initializer_Scene_2eproto_;
const ::google::protobuf::EnumDescriptor* ColliderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColliderType_descriptor_;
}
bool ColliderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector3)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector3)
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector3)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector3)
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector4::kXFieldNumber;
const int Vector4::kYFieldNumber;
const int Vector4::kZFieldNumber;
const int Vector4::kWFieldNumber;
#endif  // !_MSC_VER

Vector4::Vector4()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector4)
}

void Vector4::InitAsDefaultInstance() {
}

Vector4::Vector4(const Vector4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector4)
}

void Vector4::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector4)
  SharedDtor();
}

void Vector4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector4_descriptor_;
}

const Vector4& Vector4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

Vector4* Vector4::default_instance_ = NULL;

Vector4* Vector4::New() const {
  return new Vector4;
}

void Vector4::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector4*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, w_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // optional double w = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector4)
  return false;
#undef DO_
}

void Vector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector4)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4 [default = 0];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector4)
}

::google::protobuf::uint8* Vector4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector4)
  // optional double x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4 [default = 0];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector4)
  return target;
}

int Vector4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double w = 4 [default = 0];
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {

  return true;
}

void Vector4::Swap(Vector4* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector4_descriptor_;
  metadata.reflection = Vector4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U3DPhysxScene::kIdFieldNumber;
const int U3DPhysxScene::kSceneNameFieldNumber;
const int U3DPhysxScene::kBoxColliderFieldNumber;
const int U3DPhysxScene::kSphereColliderFieldNumber;
const int U3DPhysxScene::kCapsuleColliderFieldNumber;
const int U3DPhysxScene::kMeshColliderFieldNumber;
#endif  // !_MSC_VER

U3DPhysxScene::U3DPhysxScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::InitAsDefaultInstance() {
}

U3DPhysxScene::U3DPhysxScene(const U3DPhysxScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U3DPhysxScene::~U3DPhysxScene() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxScene)
  SharedDtor();
}

void U3DPhysxScene::SharedDtor() {
  if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_name_;
  }
  if (this != default_instance_) {
  }
}

void U3DPhysxScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxScene_descriptor_;
}

const U3DPhysxScene& U3DPhysxScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxScene* U3DPhysxScene::default_instance_ = NULL;

U3DPhysxScene* U3DPhysxScene::New() const {
  return new U3DPhysxScene;
}

void U3DPhysxScene::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_scene_name()) {
      if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scene_name_->clear();
      }
    }
  }
  box_collider_.Clear();
  sphere_collider_.Clear();
  capsule_collider_.Clear();
  mesh_collider_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U3DPhysxScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scene_name;
        break;
      }

      // optional string scene_name = 2;
      case 2: {
        if (tag == 18) {
         parse_scene_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scene_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box_collider;
        break;
      }

      // repeated .killer.proto.U3DPhysxBox box_collider = 3;
      case 3: {
        if (tag == 26) {
         parse_box_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_box_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box_collider;
        if (input->ExpectTag(34)) goto parse_sphere_collider;
        break;
      }

      // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
      case 4: {
        if (tag == 34) {
         parse_sphere_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sphere_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sphere_collider;
        if (input->ExpectTag(42)) goto parse_capsule_collider;
        break;
      }

      // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
      case 5: {
        if (tag == 42) {
         parse_capsule_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capsule_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_capsule_collider;
        if (input->ExpectTag(50)) goto parse_mesh_collider;
        break;
      }

      // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
      case 6: {
        if (tag == 50) {
         parse_mesh_collider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mesh_collider()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mesh_collider;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxScene)
  return false;
#undef DO_
}

void U3DPhysxScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scene_name(), output);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (int i = 0; i < this->box_collider_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (int i = 0; i < this->sphere_collider_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (int i = 0; i < this->capsule_collider_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->capsule_collider(i), output);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (int i = 0; i < this->mesh_collider_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mesh_collider(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxScene)
}

::google::protobuf::uint8* U3DPhysxScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxScene)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (int i = 0; i < this->box_collider_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->box_collider(i), target);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (int i = 0; i < this->sphere_collider_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sphere_collider(i), target);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (int i = 0; i < this->capsule_collider_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->capsule_collider(i), target);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (int i = 0; i < this->mesh_collider_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mesh_collider(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxScene)
  return target;
}

int U3DPhysxScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string scene_name = 2;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

  }
  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  total_size += 1 * this->box_collider_size();
  for (int i = 0; i < this->box_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box_collider(i));
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  total_size += 1 * this->sphere_collider_size();
  for (int i = 0; i < this->sphere_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sphere_collider(i));
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  total_size += 1 * this->capsule_collider_size();
  for (int i = 0; i < this->capsule_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsule_collider(i));
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  total_size += 1 * this->mesh_collider_size();
  for (int i = 0; i < this->mesh_collider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mesh_collider(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U3DPhysxScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U3DPhysxScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U3DPhysxScene::MergeFrom(const U3DPhysxScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  box_collider_.MergeFrom(from.box_collider_);
  sphere_collider_.MergeFrom(from.sphere_collider_);
  capsule_collider_.MergeFrom(from.capsule_collider_);
  mesh_collider_.MergeFrom(from.mesh_collider_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scene_name()) {
      set_scene_name(from.scene_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U3DPhysxScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxScene::CopyFrom(const U3DPhysxScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxScene::IsInitialized() const {

  return true;
}

void U3DPhysxScene::Swap(U3DPhysxScene* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scene_name_, other->scene_name_);
    box_collider_.Swap(&other->box_collider_);
    sphere_collider_.Swap(&other->sphere_collider_);
    capsule_collider_.Swap(&other->capsule_collider_);
    mesh_collider_.Swap(&other->mesh_collider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U3DPhysxScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxScene_descriptor_;
  metadata.reflection = U3DPhysxScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U3DPhysxSphere::kIdFieldNumber;
const int U3DPhysxSphere::kTypeFieldNumber;
const int U3DPhysxSphere::kPosFieldNumber;
const int U3DPhysxSphere::kRadiusFieldNumber;
const int U3DPhysxSphere::kRotationFieldNumber;
#endif  // !_MSC_VER

U3DPhysxSphere::U3DPhysxSphere()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::InitAsDefaultInstance() {
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxSphere::U3DPhysxSphere(const U3DPhysxSphere& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  pos_ = NULL;
  radius_ = 0;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U3DPhysxSphere::~U3DPhysxSphere() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxSphere)
  SharedDtor();
}

void U3DPhysxSphere::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxSphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxSphere_descriptor_;
}

const U3DPhysxSphere& U3DPhysxSphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxSphere* U3DPhysxSphere::default_instance_ = NULL;

U3DPhysxSphere* U3DPhysxSphere::New() const {
  return new U3DPhysxSphere;
}

void U3DPhysxSphere::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0;
    type_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
    }
    radius_ = 0;
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U3DPhysxSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_radius;
        break;
      }

      // optional double radius = 4;
      case 4: {
        if (tag == 33) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxSphere)
  return false;
#undef DO_
}

void U3DPhysxSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional double radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxSphere)
}

::google::protobuf::uint8* U3DPhysxSphere::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxSphere)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional double radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxSphere)
  return target;
}

int U3DPhysxSphere::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional double radius = 4;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxSphere::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U3DPhysxSphere* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U3DPhysxSphere*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U3DPhysxSphere::MergeFrom(const U3DPhysxSphere& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U3DPhysxSphere::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxSphere::CopyFrom(const U3DPhysxSphere& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxSphere::IsInitialized() const {

  return true;
}

void U3DPhysxSphere::Swap(U3DPhysxSphere* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(radius_, other->radius_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U3DPhysxSphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxSphere_descriptor_;
  metadata.reflection = U3DPhysxSphere_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U3DPhysxBox::kIdFieldNumber;
const int U3DPhysxBox::kTypeFieldNumber;
const int U3DPhysxBox::kPosFieldNumber;
const int U3DPhysxBox::kXExtentsFieldNumber;
const int U3DPhysxBox::kYExtentsFieldNumber;
const int U3DPhysxBox::kZExtentsFieldNumber;
const int U3DPhysxBox::kRotationFieldNumber;
#endif  // !_MSC_VER

U3DPhysxBox::U3DPhysxBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::InitAsDefaultInstance() {
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxBox::U3DPhysxBox(const U3DPhysxBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  pos_ = NULL;
  x_extents_ = 0;
  y_extents_ = 0;
  z_extents_ = 0;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U3DPhysxBox::~U3DPhysxBox() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxBox)
  SharedDtor();
}

void U3DPhysxBox::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxBox_descriptor_;
}

const U3DPhysxBox& U3DPhysxBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxBox* U3DPhysxBox::default_instance_ = NULL;

U3DPhysxBox* U3DPhysxBox::New() const {
  return new U3DPhysxBox;
}

void U3DPhysxBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<U3DPhysxBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(x_extents_, z_extents_);
    id_ = 0;
    type_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U3DPhysxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x_extents;
        break;
      }

      // optional double x_extents = 4;
      case 4: {
        if (tag == 33) {
         parse_x_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_extents_)));
          set_has_x_extents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y_extents;
        break;
      }

      // optional double y_extents = 5;
      case 5: {
        if (tag == 41) {
         parse_y_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_extents_)));
          set_has_y_extents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z_extents;
        break;
      }

      // optional double z_extents = 6;
      case 6: {
        if (tag == 49) {
         parse_z_extents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_extents_)));
          set_has_z_extents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 7;
      case 7: {
        if (tag == 58) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxBox)
  return false;
#undef DO_
}

void U3DPhysxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional double x_extents = 4;
  if (has_x_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_extents(), output);
  }

  // optional double y_extents = 5;
  if (has_y_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_extents(), output);
  }

  // optional double z_extents = 6;
  if (has_z_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_extents(), output);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxBox)
}

::google::protobuf::uint8* U3DPhysxBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxBox)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional double x_extents = 4;
  if (has_x_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_extents(), target);
  }

  // optional double y_extents = 5;
  if (has_y_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_extents(), target);
  }

  // optional double z_extents = 6;
  if (has_z_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_extents(), target);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxBox)
  return target;
}

int U3DPhysxBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional double x_extents = 4;
    if (has_x_extents()) {
      total_size += 1 + 8;
    }

    // optional double y_extents = 5;
    if (has_y_extents()) {
      total_size += 1 + 8;
    }

    // optional double z_extents = 6;
    if (has_z_extents()) {
      total_size += 1 + 8;
    }

    // optional .killer.proto.Vector4 rotation = 7;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U3DPhysxBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U3DPhysxBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U3DPhysxBox::MergeFrom(const U3DPhysxBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_x_extents()) {
      set_x_extents(from.x_extents());
    }
    if (from.has_y_extents()) {
      set_y_extents(from.y_extents());
    }
    if (from.has_z_extents()) {
      set_z_extents(from.z_extents());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U3DPhysxBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxBox::CopyFrom(const U3DPhysxBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxBox::IsInitialized() const {

  return true;
}

void U3DPhysxBox::Swap(U3DPhysxBox* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(x_extents_, other->x_extents_);
    std::swap(y_extents_, other->y_extents_);
    std::swap(z_extents_, other->z_extents_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U3DPhysxBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxBox_descriptor_;
  metadata.reflection = U3DPhysxBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U3DPhysxCapsule::kIdFieldNumber;
const int U3DPhysxCapsule::kTypeFieldNumber;
const int U3DPhysxCapsule::kPosFieldNumber;
const int U3DPhysxCapsule::kRaduisFieldNumber;
const int U3DPhysxCapsule::kHeightFieldNumber;
const int U3DPhysxCapsule::kRotationFieldNumber;
#endif  // !_MSC_VER

U3DPhysxCapsule::U3DPhysxCapsule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::InitAsDefaultInstance() {
  pos_ = const_cast< ::killer::proto::Vector3*>(&::killer::proto::Vector3::default_instance());
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxCapsule::U3DPhysxCapsule(const U3DPhysxCapsule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  pos_ = NULL;
  raduis_ = 0;
  height_ = 0;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U3DPhysxCapsule::~U3DPhysxCapsule() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxCapsule)
  SharedDtor();
}

void U3DPhysxCapsule::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rotation_;
  }
}

void U3DPhysxCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxCapsule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxCapsule_descriptor_;
}

const U3DPhysxCapsule& U3DPhysxCapsule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxCapsule* U3DPhysxCapsule::default_instance_ = NULL;

U3DPhysxCapsule* U3DPhysxCapsule::New() const {
  return new U3DPhysxCapsule;
}

void U3DPhysxCapsule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<U3DPhysxCapsule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(raduis_, height_);
    id_ = 0;
    type_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::killer::proto::Vector3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U3DPhysxCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxCapsule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_raduis;
        break;
      }

      // optional double raduis = 4;
      case 4: {
        if (tag == 33) {
         parse_raduis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raduis_)));
          set_has_raduis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // optional double height = 5;
      case 5: {
        if (tag == 41) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 6;
      case 6: {
        if (tag == 50) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxCapsule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxCapsule)
  return false;
#undef DO_
}

void U3DPhysxCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional double raduis = 4;
  if (has_raduis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->raduis(), output);
  }

  // optional double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxCapsule)
}

::google::protobuf::uint8* U3DPhysxCapsule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxCapsule)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional double raduis = 4;
  if (has_raduis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->raduis(), target);
  }

  // optional double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxCapsule)
  return target;
}

int U3DPhysxCapsule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional double raduis = 4;
    if (has_raduis()) {
      total_size += 1 + 8;
    }

    // optional double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional .killer.proto.Vector4 rotation = 6;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxCapsule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U3DPhysxCapsule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U3DPhysxCapsule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U3DPhysxCapsule::MergeFrom(const U3DPhysxCapsule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (from.has_raduis()) {
      set_raduis(from.raduis());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U3DPhysxCapsule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxCapsule::CopyFrom(const U3DPhysxCapsule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxCapsule::IsInitialized() const {

  return true;
}

void U3DPhysxCapsule::Swap(U3DPhysxCapsule* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(raduis_, other->raduis_);
    std::swap(height_, other->height_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U3DPhysxCapsule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxCapsule_descriptor_;
  metadata.reflection = U3DPhysxCapsule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U3DPhysxMesh::kIdFieldNumber;
const int U3DPhysxMesh::kTypeFieldNumber;
const int U3DPhysxMesh::kVertexCountFieldNumber;
const int U3DPhysxMesh::kVerticesFieldNumber;
const int U3DPhysxMesh::kRotationFieldNumber;
#endif  // !_MSC_VER

U3DPhysxMesh::U3DPhysxMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::InitAsDefaultInstance() {
  rotation_ = const_cast< ::killer::proto::Vector4*>(&::killer::proto::Vector4::default_instance());
}

U3DPhysxMesh::U3DPhysxMesh(const U3DPhysxMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 1;
  vertex_count_ = 0;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U3DPhysxMesh::~U3DPhysxMesh() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxMesh)
  SharedDtor();
}

void U3DPhysxMesh::SharedDtor() {
  if (this != default_instance_) {
    delete rotation_;
  }
}

void U3DPhysxMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U3DPhysxMesh_descriptor_;
}

const U3DPhysxMesh& U3DPhysxMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

U3DPhysxMesh* U3DPhysxMesh::default_instance_ = NULL;

U3DPhysxMesh* U3DPhysxMesh::New() const {
  return new U3DPhysxMesh;
}

void U3DPhysxMesh::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    id_ = 0;
    type_ = 1;
    vertex_count_ = 0;
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::killer::proto::Vector4::Clear();
    }
  }
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U3DPhysxMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vertex_count;
        break;
      }

      // optional int32 vertex_count = 3;
      case 3: {
        if (tag == 24) {
         parse_vertex_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex_count_)));
          set_has_vertex_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertices;
        break;
      }

      // repeated .killer.proto.Vector3 vertices = 4;
      case 4: {
        if (tag == 34) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertices;
        if (input->ExpectTag(42)) goto parse_rotation;
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (tag == 42) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxMesh)
  return false;
#undef DO_
}

void U3DPhysxMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 vertex_count = 3;
  if (has_vertex_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex_count(), output);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertices(i), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxMesh)
}

::google::protobuf::uint8* U3DPhysxMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxMesh)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 vertex_count = 3;
  if (has_vertex_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex_count(), target);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vertices(i), target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxMesh)
  return target;
}

int U3DPhysxMesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 vertex_count = 3;
    if (has_vertex_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex_count());
    }

    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  // repeated .killer.proto.Vector3 vertices = 4;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U3DPhysxMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U3DPhysxMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U3DPhysxMesh::MergeFrom(const U3DPhysxMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vertex_count()) {
      set_vertex_count(from.vertex_count());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U3DPhysxMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxMesh::CopyFrom(const U3DPhysxMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxMesh::IsInitialized() const {

  return true;
}

void U3DPhysxMesh::Swap(U3DPhysxMesh* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(vertex_count_, other->vertex_count_);
    vertices_.Swap(&other->vertices_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U3DPhysxMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U3DPhysxMesh_descriptor_;
  metadata.reflection = U3DPhysxMesh_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace killer

// @@protoc_insertion_point(global_scope)
